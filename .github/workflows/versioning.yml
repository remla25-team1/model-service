name: Automated Versioning and Pre-Release Bump

on:
  workflow_dispatch:
  
jobs:
  bump-patch-after-release:
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WRITE_PERMISSION }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest release version
        id: get_version
        run: |
          LATEST_TAG=$(git tag --list 'v*.*.*' --sort=-v:refname | grep -v -- '-pre' | head -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No release tag found, using v0.0.0"
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          # If PATCH is empty, try to get from VERSION.txt (user may have set v0.0.1 etc)
          if [[ -z "$PATCH" ]]; then
            PATCH=$(cat VERSION.txt | cut -d . -f 3 | sed 's/[^0-9].*//')
            if [[ -z "$PATCH" ]]; then PATCH=0; fi
          fi
          RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH-pre"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump to latest release version on main
        run: |
          CUR_VERSION=$(cat VERSION.txt)
          LATEST_TAG=$(git tag --list 'v*.*.*' --sort=-v:refname | grep -v -- '-pre' | head -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          VERSION=${LATEST_TAG#v}
          if [ "$VERSION" != "$CUR_VERSION" ]; then
            echo "$VERSION" > VERSION.txt
            git add VERSION.txt
            git commit -m "chore: sync VERSION.txt to latest release $VERSION"
            git push
          else
            echo "No version bump needed, VERSION.txt is already at latest release."
          fi

  auto-patch-release:
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WRITE_PERMISSION }}

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Read base version and generate next pre-release version
        id: tag
        run: |
          BASE_VERSION=$(cat VERSION.txt)
          BASE_VERSION=$(echo "$BASE_VERSION" | sed -E 's/-pre.*$/-pre/')
          BASE_VERSION=${BASE_VERSION%-pre/}
          BASE_VERSION=${BASE_VERSION%-pre}
          DATE=$(date +'%Y%m%d')
          TAGS=$(git ls-remote --tags origin "refs/tags/v$BASE_VERSION-pre-$DATE-*" | awk -F/ '{print $3}')
          MAX_N=0
          for TAG in $TAGS; do
            N=$(echo $TAG | sed -E 's/.*-pre-'$DATE'-(.*)$/\1/')
            if [[ $N =~ ^[0-9]+$ ]] && (( 10#$N > 10#$MAX_N )); then
              MAX_N=$N
            fi
          done
          NEXT_N=$(printf "%03d" $((10#$MAX_N + 1)))
          NEW_TAG="v$BASE_VERSION-pre-$DATE-$NEXT_N"
          echo "Generated tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.tag.outputs.new_tag }}$"; then
            echo "Tag ${{ steps.tag.outputs.new_tag }} already exists on remote. Skipping tag creation."
          else
            git tag ${{ steps.tag.outputs.new_tag }}
            git push origin ${{ steps.tag.outputs.new_tag }}
          fi
